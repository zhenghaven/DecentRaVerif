(***************************** library Expansions ******************************)

	(***************************** CV_Common_Declarations ******************************)

expand CV_Common_Declarations(bitstringbot, bottom, emptyStr, keyseed, cleartext, ciphertext).

	(***************************** CV_DSA ******************************)

expand CV_det_signature_types(spkey, sskey, signinput, signature, StrToSignin).
expand CV_det_signature_args(keyseed, spkey, sskey, signinput, signature, sskgen, spkgen, sign, checksign, getmess, getkey).

	(***************************** CV_RSA ******************************)

expand CV_public_key_enc_types(pkey, skey, aenc_seed).
expand CV_public_key_enc_args(keyseed, bitstringbot, bottom, pkey, skey, cleartext, ciphertext, aenc_seed, skgen, pkgen, aenc, aenc_r, adec, ainjbot, aZ).

	(***************************** CV_AEAD ******************************)

expand CV_keygen_types(key).
expand CV_keygen_args(keyseed, key, kgen).

expand CV_AEAD_types(key, add_data, nonce, zero_nonce, dummy_key, IncrNonce).
expand CV_AEAD_args(key, bitstringbot, bottom, bitstring, ciphertext, bitstring, nonce, enc, enc, dec, sinjbot, sZ, dummy_key).

	(***************************** DecentRA_EnclaveBas ******************************)

expand Decent_Enclave_Basics(spkey, enclaveProg, enclaveHash, HashEnclave, SPKey2Bitstr, EventSubType).

expand Decent_ECDH_Key(key, ecskey, ecpkey, ecpkgen, signinput, bitstring, ciphertext, bitstring, nonce, enc,
	DiHeValG, DiHeExp, EcDiHeToKey, EcDiHeKeyGen, EcPKeyToSignin,
	dummy_ecpkey, GetEcPKeyA, GetEcPKeyB).

	(***************************** DecentRA_LocAtt ******************************)

expand Decent_Local_Attestation(
	(** CV_ macros  **) keyseed, sskey, spkey, sign, signinput, signature,
	(** Encl Basics **) enclaveProg, enclaveHash, HashEnclave,
	(** ECHD Key    **) ecpkey,
	(** This. Rep   **) LocAttRep, GetLocAttSignedRep).

	(***************************** DecentRA_IasRep ******************************)

expand Decent_IAS_Report(
	(** CV_ macros  **) keyseed, sskey, spkey, sskgen, spkgen, sign, getmess, checksign, signinput, signature,
	(** Encl Basics **) enclaveProg, enclaveHash, HashEnclave,
	(** This. Vars  **) iasRepKeySeed, encPrvsKeySeed,
	(** This. Quote **) EnclaveQuoteSignin, GetEnclaveSignedQuote_intr, GetEnclaveSignedQuote,
	(** This. Rep   **) IasRep2Signin, GetSignedIasRep_intr, GetSignedIasRep,
	(** This. Proc  **) IasIssueRep, IasProc_intr).

	(***************************** DecentRA Lists ******************************)

expand Decent_Auth_List(enclaveHash, AuthListItem, AuthListNewItem, AuthList, AuthListInsert, AuthListEmpty, AuthListIsIn, AuthListToStr).
expand Decent_Recv_List(enclaveHash, RecvListItem, RecvListNewItem, RecvList, RecvListInsert, RecvListEmpty, RecvListIsIn, RecvListToStr).

	(***************************** DecentRA_DecentSvr ******************************)

expand Decent_Decent_Server(
	(** CV_ macros    **) keyseed, sskey, spkey, sskgen, spkgen, getmess, sign, checksign, signinput, signature, emptyStr, key, bitstring, ciphertext, nonce, enc, dec, sinjbot, bottom, zero_nonce, IncrNonce,
	(** Encl Basics   **) enclaveProg, enclaveHash, HashEnclave, SPKey2Bitstr,
	(** ECHD Key      **) ecskey, ecpkey, ecpkgen, EcDiHeKeyGen,
	(** LocAtt Rep    **) LocAttRep, GetLocAttSignedRep,
	(** Ias Rep       **) encPrvsKeySeed, GetEnclaveSignedQuote_intr, IasRep2Signin,
	(** Lists         **) AuthList, AuthListNewItem, AuthListIsIn,
	(** This. Vars    **) enclaveDecentSvr, decentSvrName,
	(** This. SvrCert **) DecentSvrSignin, GetDecentSvrCert, VrfyDecentSvrCert_intr,
	(** This. AppCert **) DecentAppSignin, GetDecentAppCert, VrfyDecentAppCertChain_intr,
	(** This. SvrProc **) DecentSvrIssueCert, DecentSvrGotIasRep, DecentSvrProc_intr, DecentSvrProcP2_intr).

	(***************************** DecentRA_DecentApp ******************************)

expand Decent_Decent_App(
	(** CV_ macros    **) keyseed, sskey, spkey, sskgen, spkgen, getmess, sign, checksign, signinput, signature, StrToSignin, emptyStr, key, cleartext, ciphertext, nonce, enc, dec, sinjbot, bottom, zero_nonce, IncrNonce,
	(** Encl Basics   **) enclaveProg, enclaveHash, SPKey2Bitstr, EventSubType,
	(** ECHD Key      **) ecskey, ecpkey, ecpkgen, EcDiHeKeyGen, EcPKeyToSignin,
	(** LocAtt Rep    **) LocAttRep, GetLocAttSignedRep,
	(** Decent Svr    **) DecentSvrSignin, DecentAppSignin, VrfyDecentSvrCert_intr, VrfyDecentAppCertChain_intr,
	(** Lists         **) AuthList,
	(** This.Event    **) DecentAppAccPeer, DecentAppGotCert, DecentAppGotMsg, DecentAppGotRels, DecentVrfyIssueCert,
	(** This.VrfyProc **) DecentVrfy_Proc_intr, DecentVrfy_ProcP2_intr,
	(** This.RecvProc **) DecentRevc_Proc_intr, DecentRevc_ProcP2_intr,
	(** This.AppProc1 **) DecentApp_X_X_Svr_ProcP4_intr, DecentApp_X_Auls_Svr_ProcP3_intr, DecentApp_Auls_Auls_Svr_ProcP2_intr, DecentApp_Auls_Auls_Svr_Proc_intr,
	(** This.AppProc2 **) DecentApp_X_Vrfy_Svr_ProcP3_intr,
	(** This.AppProc4 **) DecentApp_Vrfy_Vrfy_Svr_ProcP3_intr, DecentApp_Vrfy_Vrfy_Svr_ProcP2_intr, DecentApp_Vrfy_Vrfy_Svr_Proc_intr,
	(** This.AppProc5 **) DecentApp_X_X_Clt_ProcP4_intr, DecentApp_X_Auls_Clt_ProcP3_intr, DecentApp_Auls_Auls_Clt_ProcP2_intr, DecentApp_Auls_Auls_Clt_Proc_intr,
	(** This.AppProc6 **) DecentApp_X_Vrfy_Clt_ProcP3_intr,
	(** This.AppProc8 **) DecentApp_Vrfy_Vrfy_Clt_ProcP3_intr, DecentApp_Vrfy_Vrfy_Clt_ProcP2_intr, DecentApp_Vrfy_Vrfy_Clt_Proc_intr
	).

(*============================================================================*)
(******************************* For this process *****************************)

(* Settings:*)
set attacker = active.

(* Channels: *)
free svrIasCh : channel.
free recvCh : channel.
free vrfyCh : channel.
free appSvrCh : channel.
free peerCh : channel.

(* Secret Message *)
const msg : bitstring [private].

(* Enclaves *)
const enclaveRecv : enclaveProg.
const enclaveRecvName : bitstring.

const enclaveVrfyE : enclaveProg.
const enclaveVrfyEName : bitstring.

const enclaveVrfyF : enclaveProg.
const enclaveVrfyFName : bitstring.

const enclaveA : enclaveProg.
const enclaveAName : bitstring.

const enclaveB : enclaveProg.
const enclaveBName : bitstring.

const enclaveC : enclaveProg.
const enclaveCName : bitstring.

const enclaveD : enclaveProg.
const enclaveDName : bitstring.

const enclaveE : enclaveProg.
const enclaveEName : bitstring.

const enclaveF : enclaveProg.
const enclaveFName : bitstring.

(******************************* Secrecy assumptions *****************************)

not attacker(iasRepKeySeed).
not attacker(encPrvsKeySeed).

not attacker(new repKeySeedRecv).
not attacker(new svrKeySeedRecv).
not attacker(new enclaveRecvKeySeed).
not attacker(new repKeySeedVrfyE).
not attacker(new svrKeySeedVrfyE).
not attacker(new enclaveVrfyEKeySeed).
not attacker(new repKeySeedE).
not attacker(new svrKeySeedE).
not attacker(new enclaveEKeySeed).
not attacker(new repKeySeedVrfyF).
not attacker(new svrKeySeedVrfyF).
not attacker(new enclaveVrfyFKeySeed).
not attacker(new repKeySeedF).
not attacker(new svrKeySeedF).
not attacker(new enclaveFKeySeed).

not attacker(sskgen(iasRepKeySeed)).
not attacker(sskgen(encPrvsKeySeed)).

not attacker(sskgen(new repKeySeedRecv)).
not attacker(sskgen(new svrKeySeedRecv)).
not attacker(sskgen(new enclaveRecvKeySeed)).
not attacker(sskgen(new repKeySeedVrfyE)).
not attacker(sskgen(new svrKeySeedVrfyE)).
not attacker(sskgen(new enclaveVrfyEKeySeed)).
not attacker(sskgen(new repKeySeedE)).
not attacker(sskgen(new svrKeySeedE)).
not attacker(sskgen(new enclaveEKeySeed)).
not attacker(sskgen(new repKeySeedVrfyF)).
not attacker(sskgen(new svrKeySeedVrfyF)).
not attacker(sskgen(new enclaveVrfyFKeySeed)).
not attacker(sskgen(new repKeySeedF)).
not attacker(sskgen(new svrKeySeedF)).
not attacker(sskgen(new enclaveFKeySeed)).

(******************************* Queries *****************************)

(* Query 1 *)
query anyMsg : bitstring;
	event(DecentAppGotMsg(enclaveE, anyMsg)) ==>
	(anyMsg = msg).

(* Query 2 *)
query attacker(msg).

(* Query 3 *)
query anyEnclaveHash : enclaveHash;
	event(DecentAppAccPeer(enclaveE, anyEnclaveHash)) ==>
	(anyEnclaveHash = HashEnclave(enclaveF)).

(* Query 4 *)
query anyEnclaveHash : enclaveHash;
	event(DecentAppAccPeer(enclaveF, anyEnclaveHash)) ==>
	(anyEnclaveHash = HashEnclave(enclaveE)).

process
	let authList0 = AuthListInsert(AuthListNewItem(HashEnclave(enclaveDecentSvr), decentSvrName), AuthListEmpty) in
	let authList1 = AuthListInsert(AuthListNewItem(HashEnclave(enclaveRecv), enclaveRecvName), authList0) in
	let authList2 = AuthListInsert(AuthListNewItem(HashEnclave(enclaveVrfyE), enclaveVrfyEName), authList1) in
	let authList3 = AuthListInsert(AuthListNewItem(HashEnclave(enclaveA), enclaveAName), authList2) in
	let authListA = AuthListInsert(AuthListNewItem(HashEnclave(enclaveB), enclaveBName), authList3) in

	let revcListA = (HashEnclave(enclaveD), HashEnclave(enclaveD)) in

	let pub_iasRepSPKey : spkey = spkgen(iasRepKeySeed) in
	let pub_encPrvsKey : spkey = spkgen(encPrvsKeySeed) in

	(* IAS Server   *) (!IasProc_intr(svrIasCh, iasRepKeySeed, pub_encPrvsKey))
	|
	(* Decent Platform for Recv   *)
	(!
		(
			new repKeySeedRecv : keyseed;
			new svrKeySeedRecv : keyseed;
			new enclaveRecvKeySeed : keyseed;
			(DecentSvrProc_intr(enclaveDecentSvr, svrKeySeedRecv, svrIasCh, appSvrCh, pub_iasRepSPKey, encPrvsKeySeed, repKeySeedRecv))
			|
			(DecentRevc_Proc_intr(enclaveRecv, appSvrCh, recvCh, pub_iasRepSPKey, repKeySeedRecv,
				enclaveRecvKeySeed, decentSvrName, authListA, revcListA))
		)
	)
	|
	(* Decent Platform for VrfyE  *)
	(!
		(
			new repKeySeedVrfyE : keyseed;
			new svrKeySeedVrfyE : keyseed;
			new enclaveVrfyEKeySeed : keyseed;
			(DecentSvrProc_intr(enclaveDecentSvr, svrKeySeedVrfyE, svrIasCh, appSvrCh, pub_iasRepSPKey, encPrvsKeySeed, repKeySeedVrfyE))
			|
			(DecentVrfy_Proc_intr(enclaveVrfyE, appSvrCh, vrfyCh, pub_iasRepSPKey,
				repKeySeedVrfyE, enclaveVrfyEKeySeed, decentSvrName, authListA, enclaveEName, HashEnclave(enclaveE)))
		)
	)
	|
	(* Decent Platform for verified App E  *)
	(!
		(
			new repKeySeedE : keyseed;
			new svrKeySeedE : keyseed;
			new enclaveEKeySeed : keyseed;
			(DecentSvrProc_intr(enclaveDecentSvr, svrKeySeedE, svrIasCh, appSvrCh, pub_iasRepSPKey, encPrvsKeySeed, repKeySeedE))
			|
			(DecentApp_Vrfy_Vrfy_Svr_Proc_intr(enclaveE, appSvrCh, vrfyCh, peerCh, recvCh,
				pub_iasRepSPKey, repKeySeedE, enclaveEKeySeed,
				decentSvrName, enclaveRecvName, enclaveFName, enclaveVrfyEName, authListA))
		)
	)
	|
	(* Decent Platform for VrfyF  *)
	(!
		(
			new repKeySeedVrfyF : keyseed;
			new svrKeySeedVrfyF : keyseed;
			new enclaveVrfyFKeySeed : keyseed;
			(DecentSvrProc_intr(enclaveDecentSvr, svrKeySeedVrfyF, svrIasCh, appSvrCh, pub_iasRepSPKey, encPrvsKeySeed, repKeySeedVrfyF))
			|
			(DecentVrfy_Proc_intr(enclaveVrfyE, appSvrCh, vrfyCh, pub_iasRepSPKey,
				repKeySeedVrfyF, enclaveVrfyFKeySeed, decentSvrName, authListA, enclaveFName, HashEnclave(enclaveF)))
		)
	)
	|
	(* Decent Platform for verified App F  *)
	(!
		(
			new repKeySeedF : keyseed;
			new svrKeySeedF : keyseed;
			new enclaveFKeySeed : keyseed;
			(DecentSvrProc_intr(enclaveDecentSvr, svrKeySeedF, svrIasCh, appSvrCh, pub_iasRepSPKey, encPrvsKeySeed, repKeySeedF))
			|
			(DecentApp_Vrfy_Vrfy_Clt_Proc_intr(enclaveF, appSvrCh, vrfyCh, peerCh, msg, recvCh,
				pub_iasRepSPKey, repKeySeedF, enclaveFKeySeed,
				decentSvrName, enclaveRecvName, enclaveEName, enclaveVrfyEName, authListA))
		)
	)
