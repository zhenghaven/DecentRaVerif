(***************************** library Expansions ******************************)

	(***************************** CV_Common_Declarations ******************************)

expand CV_Common_Declarations(bitstringbot, bottom, emptyStr, keyseed, cleartext, ciphertext).

	(***************************** CV_DSA ******************************)

expand CV_det_signature_types(spkey, sskey, signinput, signature).
expand CV_det_signature_args(keyseed, spkey, sskey, signinput, signature, sskgen, spkgen, sign, checksign).

	(***************************** CV_RSA ******************************)

expand CV_public_key_enc_types(pkey, skey, aenc_seed).
expand CV_public_key_enc_args(keyseed, bitstringbot, bottom, pkey, skey, cleartext, ciphertext, aenc_seed, skgen, pkgen, aenc, aenc_r, adec, ainjbot, aZ).

	(***************************** CV_AEAD ******************************)

expand CV_keygen_types(key).
expand CV_keygen_args(keyseed, key, kgen).

expand CV_AEAD_types(add_data, enc_seed, empty_add_data).
expand CV_AEAD_args(key, bitstringbot, bottom, cleartext, ciphertext, add_data, enc_seed, enc, enc_r, dec, sinjbot, sZ).

(*************************************** For this process ******************************)

set attacker = active.

fun SPkey2Signin(spkey) : signinput [typeConverter].
fun Pkey2Signin(pkey) : signinput [typeConverter].
fun Cipher2Signin(ciphertext) : signinput [typeConverter].
fun key2Cleartext(key) : cleartext [typeConverter].
fun bit2Cleartext(bitstring) : cleartext [typeConverter].

const emptyAddData : add_data.

free c : channel.
free c2 : channel.

free msg : bitstring[private].
free advMsg : bitstring.

const caSSKeySeed : keyseed[private].
const authSSKeySeed : keyseed[private].

event SvrGotKey.
event SvrGotMsg(bitstring).

query attacker(msg)
	public_vars pub_caSPKey, pub_authSPKey, pub_cltSPKey.
query event(SvrGotMsg(msg))
	public_vars pub_caSPKey, pub_authSPKey, pub_cltSPKey.
query event(SvrGotMsg(advMsg))
	public_vars pub_caSPKey, pub_authSPKey, pub_cltSPKey.

let clientA(svrCh : channel, cltKeySeed : keyseed, caSPkey : spkey) =
	in(svrCh, (svrSPKey : spkey, svrCert : signature, svrPkey : pkey, svrPkeySign : signature));
	if checksign(SPkey2Signin(svrSPKey), caSPkey, svrCert) &&
		checksign(Pkey2Signin(svrPkey), svrSPKey, svrPkeySign) then
	(
		new kSeed : keyseed;
		let k = kgen(kSeed) in
		let encK = aenc(key2Cleartext(k), svrPkey) in
		out(svrCh, (encK, sign(Cipher2Signin(encK), sskgen(cltKeySeed))));

		out(svrCh, enc(bit2Cleartext(msg), emptyAddData, k))
	).

let serverB(caCh : channel, cltCh : channel, authKeySeed : keyseed, cltSPKey : spkey) =
	new svrSSKeySeed : keyseed;
	(* 1. Get Cert from CA. *)
	out(caCh, (spkgen(svrSSKeySeed), sign(SPkey2Signin(spkgen(svrSSKeySeed)), sskgen(authKeySeed))));
	in(caCh, svrCert : signature);

	new svrSKeySeed : keyseed;
	let svrSkey = skgen(svrSKeySeed) in
	let svrPkey = pkgen(svrSKeySeed) in
	(* 2. Server sends cert to client *)
	out(cltCh, (spkgen(svrSSKeySeed), svrCert, svrPkey, sign(Pkey2Signin(svrPkey), sskgen(svrSSKeySeed))));

	(* 3. Server receive signed encrypted k from client *)
	in(cltCh, (encKey : ciphertext, encKsign : signature));
	if checksign(Cipher2Signin(encKey), cltSPKey, encKsign) then
	(
		let ainjbot(key2Cleartext(k)) = adec(encKey, svrSkey) in
		event SvrGotKey;

		(* 4. Server receive auth-encrypted msg from client *)
		in(cltCh, x : ciphertext);
		let sinjbot(bit2Cleartext(z : bitstring)) = dec(x, emptyAddData, k) in
		event SvrGotMsg(z)
	).

let CAProc(caCh : channel, caKeySeed : keyseed, authKeySeed : keyseed) =
	in(caCh, (svrSPKey : spkey, svrKeySign : signature));
	if checksign(SPkey2Signin(svrSPKey), spkgen(authKeySeed), svrKeySign) then
	(
		out(caCh, sign(SPkey2Signin(svrSPKey), sskgen(caKeySeed)))
	).

process
	new cltKeySeed : keyseed;

	let pub_caSPKey : spkey = spkgen(caSSKeySeed) in
	let pub_authSPKey : spkey = spkgen(authSSKeySeed) in
	let pub_cltSPKey : spkey = spkgen(cltKeySeed) in

	(!clientA(c, cltKeySeed, pub_caSPKey))
	|
	(!serverB(c2, c, authSSKeySeed, pub_cltSPKey))
	|
	(!CAProc(c2, caSSKeySeed, authSSKeySeed))
