(***************************** library Expansions ******************************)

	(***************************** CV_Common_Declarations ******************************)

expand CV_Common_Declarations(bitstringbot, bottom, keyseed, cleartext, ciphertext).

	(***************************** CV_DSA ******************************)

expand CV_det_signature_types(spkey, sskey, signinput, signature).
expand CV_det_signature_args(keyseed, spkey, sskey, signinput, signature, sskgen, spkgen, sign, checksign).

	(***************************** CV_RSA ******************************)

expand CV_public_key_enc_types(pkey, skey, aenc_seed).
expand CV_public_key_enc_args(keyseed, bitstringbot, bottom, pkey, skey, cleartext, ciphertext, aenc_seed, skgen, pkgen, aenc, aenc_r, adec, ainjbot, aZ).

	(***************************** CV_AEAD ******************************)

expand CV_keygen_types(key).
expand CV_keygen_args(keyseed, key, kgen).

expand CV_AEAD_types(add_data, enc_seed).
expand CV_AEAD_args(key, bitstringbot, bottom, cleartext, ciphertext, add_data, enc_seed, enc, enc_r, dec, sinjbot, sZ).

(*************************************** For this process ******************************)

set attacker = active.

fun Pkey2Signin(pkey) : signinput [typeConverter].
fun Cipher2Signin(ciphertext) : signinput [typeConverter].
fun key2Cleartext(key) : cleartext [typeConverter].
fun bit2Cleartext(bitstring) : cleartext [typeConverter].

const emptyAddData : add_data.

free c : channel.

free s : bitstring[private].
free z : bitstring[private].

event SvrGotKey.
event SvrGotMalMsg.

const svrSSKeySeed : keyseed[private].

query attacker(s) public_vars pub_svrSPKey.
query event(SvrGotMalMsg) public_vars pub_svrSPKey.

let clientA(spkA : spkey, sskA : sskey, svrSPkey : spkey) =
	in(c, (svrPkey : pkey, svrPkeySign : signature));
	new kSeed : keyseed;
	let k = kgen(kSeed) in
	if checksign(Pkey2Signin(svrPkey), svrSPkey, svrPkeySign) then
	(
		let encK = aenc(key2Cleartext(k), svrPkey) in
		out(c, (encK, sign(Cipher2Signin(encK), sskA)));
		out(c, enc(bit2Cleartext(s), emptyAddData, k))
	).

let serverB(svrSPkey : spkey, svrSSkey : sskey, spkA : spkey) =
	new svrSKeySeed : keyseed;
	let svrSkey = skgen(svrSKeySeed) in
	let svrPkey = pkgen(svrSKeySeed) in
	out(c, (svrPkey, sign(Pkey2Signin(svrPkey), svrSSkey)));
	in(c, (encKey : ciphertext, encKsign : signature));
	if checksign(Cipher2Signin(encKey), spkA, encKsign) then
	(
		let ainjbot(key2Cleartext(k)) = adec(encKey, svrSkey) in
		event SvrGotKey;
		in(c, x : ciphertext);
		let sinjbot(bit2Cleartext(z)) = dec(x, emptyAddData, k) in
		if (z <> s) then
		(
			event SvrGotMalMsg
		)
	).

process
	let pub_svrSPKey : spkey = spkgen(svrSSKeySeed) in

	let svrSSKey : sskey = sskgen(svrSSKeySeed) in
	new sskASeed : keyseed;
	let skA = sskgen(sskASeed) in
	let pkA = spkgen(sskASeed) in
	((!clientA(pkA, skA, pub_svrSPKey)) | (!serverB(pub_svrSPKey, svrSSKey, pkA)))
