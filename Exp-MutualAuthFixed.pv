(***************************** library Expansions ******************************)

	(***************************** CV_Common_Declarations ******************************)

expand CV_Common_Declarations(bitstringbot, bottom, keyseed, cleartext, ciphertext).

	(***************************** CV_DSA ******************************)

expand CV_det_signature_types(spkey, sskey, signinput, signature).
expand CV_det_signature_args(keyseed, spkey, sskey, signinput, signature, sskgen, spkgen, sign, checksign).

	(***************************** CV_RSA ******************************)

expand CV_public_key_enc_types(pkey, skey, aenc_seed).
expand CV_public_key_enc_args(keyseed, bitstringbot, bottom, pkey, skey, cleartext, ciphertext, aenc_seed, skgen, pkgen, aenc, aenc_r, adec, ainjbot, aZ).

	(***************************** CV_AEAD ******************************)

expand CV_keygen_types(key).
expand CV_keygen_args(keyseed, key, kgen).

expand CV_AEAD_types(add_data, enc_seed).
expand CV_AEAD_args(key, bitstringbot, bottom, cleartext, ciphertext, add_data, enc_seed, enc, enc_r, dec, sinjbot, sZ).

(*************************************** For this process ******************************)

fun Pkey2Signin(pkey) : signinput [typeConverter].
fun key2Cleartext(key) : cleartext [typeConverter].
fun bit2Cleartext(bitstring) : cleartext [typeConverter].

const emptyAddData : add_data.

free c : channel.

free s : bitstring[private].
free z : bitstring[private].

event SvrGotKey.
event SvrGotCorrectMsg.
event SvrGotWrongMsg.

free svrSSKeySeed : keyseed[private].
(*free svrSSKey : sskey[private].*)
letfun svrSPkey() = spkgen(svrSSKeySeed).
(*letfun svrSPkey() = new r : sskey; spk(r).*)

query attacker(s).
query event(SvrGotCorrectMsg).
query event(SvrGotWrongMsg).

let clientA(pkA : pkey, skA : skey) =
	in(c, (svrPkey : pkey, svrPkeySign : signature));
	new kSeed : keyseed;
	let k = kgen(kSeed) in
	if checksign(Pkey2Signin(svrPkey), svrSPkey(), svrPkeySign) then
	out(c, aenc(key2Cleartext(k), svrPkey));
	out(c, enc(bit2Cleartext(s), emptyAddData, k)).

let serverB() =
	new svrSKeySeed : keyseed;
	let svrSkey = skgen(svrSKeySeed) in
	let svrPkey = pkgen(svrSKeySeed) in
	out(c, (svrPkey, sign(Pkey2Signin(svrPkey), sskgen(svrSSKeySeed))));
	in(c, encKey : ciphertext);
	let ainjbot(key2Cleartext(k)) = adec(encKey, svrSkey) in
	event SvrGotKey;
	in(c, x : ciphertext);
	let sinjbot(bit2Cleartext(z)) = dec(x, emptyAddData, k) in
	if (z = s) then
		event SvrGotCorrectMsg
	else
		event SvrGotWrongMsg;
	0.

process
	new skASeed : keyseed;
	let skA = skgen(skASeed) in
	let pkA = pkgen(skASeed) in
	((!clientA(pkA, skA)) | (!serverB()))
