(***************************** library Expansions ******************************)

	(***************************** CV_Common_Declarations ******************************)

expand CV_Common_Declarations(bitstringbot, bottom, emptyStr, keyseed, cleartext, ciphertext).

	(***************************** CV_DSA ******************************)

expand CV_det_signature_types(spkey, sskey, signinput, signature, StrToSignin).
expand CV_det_signature_args(keyseed, spkey, sskey, signinput, signature, sskgen, spkgen, sign, checksign, getmess, getkey).

	(***************************** CV_RSA ******************************)

expand CV_public_key_enc_types(pkey, skey, aenc_seed).
expand CV_public_key_enc_args(keyseed, bitstringbot, bottom, pkey, skey, cleartext, ciphertext, aenc_seed, skgen, pkgen, aenc, aenc_r, adec, ainjbot, aZ).

	(***************************** CV_AEAD ******************************)

expand CV_keygen_types(key).
expand CV_keygen_args(keyseed, key, kgen).

expand CV_AEAD_types(key, add_data, nonce, zero_nonce, dummy_key, IncrNonce).
expand CV_AEAD_args(key, bitstringbot, bottom, bitstring, ciphertext, bitstring, nonce, enc, enc, dec, sinjbot, sZ, dummy_key).

	(***************************** DecentRA_EnclaveBas ******************************)

expand Decent_Enclave_Basics(spkey, enclaveProg, enclaveHash, HashEnclave, SPKey2Bitstr, EventSubType).

expand Decent_ECDH_Key(key, ecskey, ecpkey, ecpkgen, signinput, bitstring, ciphertext, bitstring, nonce, enc,
	DiHeValG, DiHeExp, EcDiHeToKey, EcDiHeKeyGen, EcPKeyToSignin,
	dummy_ecpkey, GetEcPKeyA, GetEcPKeyB).

	(***************************** DecentRA_LocAtt ******************************)

expand Decent_Local_Attestation(
	(** CV_ macros  **) keyseed, sskey, spkey, sign, signinput, signature,
	(** Encl Basics **) enclaveProg, enclaveHash, HashEnclave,
	(** ECHD Key    **) ecpkey,
	(** This. Rep   **) LocAttRep, GetLocAttSignedRep).

	(***************************** DecentRA_IasRep ******************************)

expand Decent_IAS_Report(
	(** CV_ macros  **) keyseed, sskey, spkey, sskgen, spkgen, sign, getmess, checksign, signinput, signature,
	(** Encl Basics **) enclaveProg, enclaveHash, HashEnclave,
	(** This. Vars  **) iasRepKeySeed, encPrvsKeySeed,
	(** This. Quote **) EnclaveQuoteSignin, GetEnclaveSignedQuote_intr, GetEnclaveSignedQuote,
	(** This. Rep   **) IasRep2Signin, GetSignedIasRep_intr, GetSignedIasRep,
	(** This. Proc  **) IasIssueRep, IasProc_intr).

	(***************************** DecentRA Lists ******************************)

expand Decent_Auth_List(enclaveHash, AuthListItem, AuthListNewItem, AuthList, AuthListInsert, AuthListEmpty, AuthListIsIn, AuthListToStr).
expand Decent_Recv_List(enclaveHash, RecvListItem, RecvListNewItem, RecvList, RecvListInsert, RecvListEmpty, RecvListIsIn, RecvListToStr).

	(***************************** DecentRA_DecentSvr ******************************)

expand Decent_Decent_Server(
	(** CV_ macros    **) keyseed, sskey, spkey, sskgen, spkgen, getmess, sign, checksign, signinput, signature, emptyStr, key, bitstring, ciphertext, nonce, enc, dec, sinjbot, bottom, zero_nonce, IncrNonce,
	(** Encl Basics   **) enclaveProg, enclaveHash, HashEnclave, SPKey2Bitstr,
	(** ECHD Key      **) ecskey, ecpkey, ecpkgen, EcDiHeKeyGen,
	(** LocAtt Rep    **) LocAttRep, GetLocAttSignedRep,
	(** Ias Rep       **) encPrvsKeySeed, GetEnclaveSignedQuote_intr, IasRep2Signin,
	(** Lists         **) AuthList, AuthListNewItem, AuthListIsIn,
	(** This. Vars    **) enclaveDecentSvr, decentSvrName,
	(** This. SvrCert **) DecentSvrSignin, GetDecentSvrCert, VrfyDecentSvrCert_intr,
	(** This. AppCert **) DecentAppSignin, GetDecentAppCert, VrfyDecentAppCertChain_intr,
	(** This. SvrProc **) DecentSvrIssueCert, DecentSvrGotIasRep, DecentSvrProc_intr, DecentSvrProcP2_intr).

	(***************************** DecentRA_DecentApp ******************************)

expand Decent_Decent_App(
	(** CV_ macros    **) keyseed, sskey, spkey, sskgen, spkgen, getmess, sign, checksign, signinput, signature, StrToSignin, emptyStr, key, cleartext, ciphertext, nonce, enc, dec, sinjbot, bottom, zero_nonce, IncrNonce,
	(** Encl Basics   **) enclaveProg, enclaveHash, SPKey2Bitstr, EventSubType,
	(** ECHD Key      **) ecskey, ecpkey, ecpkgen, EcDiHeKeyGen, EcPKeyToSignin,
	(** LocAtt Rep    **) LocAttRep, GetLocAttSignedRep,
	(** Decent Svr    **) DecentSvrSignin, DecentAppSignin, VrfyDecentSvrCert_intr, VrfyDecentAppCertChain_intr,
	(** Lists         **) AuthList,
	(** This.Event    **) DecentAppInit, DecentAppGotCert, DecentAppGotRels, DecentAppAccPeer, DecentAppGotMsg, DecentVrfyIssueCert,
	(** This.VrfyProc **) DecentVrfy_Proc_intr, DecentVrfy_ProcP2_intr,
	(** This.RecvProc **) DecentRevc_Proc_intr, DecentRevc_ProcP2_intr,
	(** This.AppProc1 **) DecentApp_X_X_Svr_ProcP4_intr, DecentApp_X_Auls_Svr_ProcP3_intr, DecentApp_Auls_Auls_Svr_ProcP2_intr, DecentApp_Auls_Auls_Svr_Proc_intr,
	(** This.AppProc2 **) DecentApp_X_Vrfy_Svr_ProcP3_intr, DecentApp_Auls_Vrfy_Svr_ProcP2_intr, DecentApp_Auls_Vrfy_Svr_Proc_intr,
	(** This.AppProc3 **) DecentApp_Vrfy_Auls_Svr_ProcP3_intr, DecentApp_Vrfy_Auls_Svr_ProcP2_intr, DecentApp_Vrfy_Auls_Svr_Proc_intr,
	(** This.AppProc4 **) DecentApp_Vrfy_Vrfy_Svr_ProcP3_intr, DecentApp_Vrfy_Vrfy_Svr_ProcP2_intr, DecentApp_Vrfy_Vrfy_Svr_Proc_intr,
	(** This.AppProc5 **) DecentApp_X_X_Clt_ProcP4_intr, DecentApp_X_Auls_Clt_ProcP3_intr, DecentApp_Auls_Auls_Clt_ProcP2_intr, DecentApp_Auls_Auls_Clt_Proc_intr,
	(** This.AppProc6 **) DecentApp_X_Vrfy_Clt_ProcP3_intr_intr, DecentApp_Auls_Vrfy_Clt_ProcP2_intr, DecentApp_Auls_Vrfy_Clt_Proc_intr,
	(** This.AppProc7 **) DecentApp_Vrfy_Auls_Clt_ProcP3_intr, DecentApp_Vrfy_Auls_Clt_ProcP2_intr, DecentApp_Vrfy_Auls_Clt_Proc_intr,
	(** This.AppProc8 **) DecentApp_Vrfy_Vrfy_Clt_ProcP3_intr, DecentApp_Vrfy_Vrfy_Clt_ProcP2_intr, DecentApp_Vrfy_Vrfy_Clt_Proc_intr
	).

(*============================================================================*)
(******************************* For this process *****************************)

(* Settings:*)
set attacker = active.

(* Channels: *)
free svrIasCh : channel.
free recvCh : channel.
free vrfyCh : channel.
free appSvrCh : channel.
free peerCh : channel.
free attackCh : channel.

(* Secret Message *)
const msg : bitstring [private].

(* Enclaves *)
const enclaveRecv : enclaveProg.
const enclaveRecvName : bitstring.

const enclaveVrfyE : enclaveProg.
const enclaveVrfyEName : bitstring.

const enclaveB : enclaveProg.
const enclaveBName : bitstring.

const enclaveE : enclaveProg.
const enclaveEName : bitstring.

const enclaveD : enclaveProg.
const malDecentSvr : enclaveProg.

(******************************* Secrecy assumptions *****************************)

not attacker(iasRepKeySeed).
not attacker(encPrvsKeySeed).

not attacker(new localRepKey).
not attacker(new decentSvrKeySeed).
not attacker(new enclaveRecvKeySeed).
not attacker(new enclaveVrfyE1KeySeed).
not attacker(new enclaveVrfyE2KeySeed).
not attacker(new enclaveEKeySeed).
not attacker(new enclaveBKeySeed).

not attacker(sskgen(iasRepKeySeed)).
not attacker(sskgen(encPrvsKeySeed)).

not attacker(sskgen(new localRepKey)).
not attacker(sskgen(new decentSvrKeySeed)).
not attacker(sskgen(new enclaveRecvKeySeed)).
not attacker(sskgen(new enclaveVrfyE1KeySeed)).
not attacker(sskgen(new enclaveVrfyE2KeySeed)).
not attacker(sskgen(new enclaveEKeySeed)).
not attacker(sskgen(new enclaveBKeySeed)).

not attacker(new enclaveRecvEcKey1).
not attacker(new enclaveVrfyE1EcKey1).
not attacker(new enclaveVrfyE2EcKey1).
not attacker(new enclaveEEcKey1).
not attacker(new enclaveEEcKey2).
not attacker(new enclaveBEcKey1).
not attacker(new enclaveBEcKey2).

(******************************* Queries *****************************)

(* Query 1 *)
query anyMsg : bitstring;
	event(DecentAppGotMsg(enclaveE, anyMsg)) ==>
	(anyMsg = msg);
	attacker(msg).

(* Query 2 *)
query anyEnclaveHash : enclaveHash, anyAuls : AuthList;
	let auLs =
	AuthListInsert(AuthListNewItem(HashEnclave(enclaveB), enclaveBName),
	AuthListInsert(AuthListNewItem(HashEnclave(enclaveVrfyE), enclaveVrfyEName),
	AuthListInsert(AuthListNewItem(HashEnclave(enclaveRecv), enclaveRecvName),
	AuthListInsert(AuthListNewItem(HashEnclave(enclaveDecentSvr), decentSvrName), AuthListEmpty)))) in
	event(DecentAppAccPeer(enclaveB, anyEnclaveHash, anyAuls)) ==>
	(anyEnclaveHash = HashEnclave(enclaveE)) && (anyAuls = auLs);
	let auLs =
	AuthListInsert(AuthListNewItem(HashEnclave(enclaveB), enclaveBName),
	AuthListInsert(AuthListNewItem(HashEnclave(enclaveVrfyE), enclaveVrfyEName),
	AuthListInsert(AuthListNewItem(HashEnclave(enclaveRecv), enclaveRecvName),
	AuthListInsert(AuthListNewItem(HashEnclave(enclaveDecentSvr), decentSvrName), AuthListEmpty)))) in
	event(DecentAppAccPeer(enclaveE, anyEnclaveHash, anyAuls)) ==>
	(anyEnclaveHash = HashEnclave(enclaveB)) && (anyAuls = auLs).

process
	let authList0 = AuthListInsert(AuthListNewItem(HashEnclave(enclaveDecentSvr), decentSvrName), AuthListEmpty) in
	let authList1 = AuthListInsert(AuthListNewItem(HashEnclave(enclaveRecv), enclaveRecvName), authList0) in
	let authList2 = AuthListInsert(AuthListNewItem(HashEnclave(enclaveVrfyE), enclaveVrfyEName), authList1) in
	let authListA = AuthListInsert(AuthListNewItem(HashEnclave(enclaveB), enclaveBName), authList2) in

	let revcListA = (HashEnclave(enclaveD), HashEnclave(enclaveD)) in

	let pub_iasRepSPKey : spkey = spkgen(iasRepKeySeed) in
	let pub_encPrvsKey : spkey = spkgen(encPrvsKeySeed) in

	(* IAS Server   *)
	(!IasProc_intr(svrIasCh, iasRepKeySeed, pub_encPrvsKey))
	(* Decent Platform *)
	|
	(!
		(
			new localRepKey : keyseed;

			(* Decent Server *)
			(!
				(
					new decentSvrKeySeed : keyseed;
					DecentSvrProc_intr(enclaveDecentSvr, decentSvrKeySeed, svrIasCh, appSvrCh, pub_iasRepSPKey, encPrvsKeySeed, localRepKey)
				)
			)
			(* Recvoker *)
			|
			(!
				(
					new enclaveRecvKeySeed : keyseed;
					new enclaveRecvEcKey1 : ecskey;
					DecentRevc_Proc_intr(enclaveRecv, appSvrCh, recvCh, pub_iasRepSPKey, localRepKey,
						enclaveRecvKeySeed, decentSvrName, authListA, revcListA, enclaveRecvEcKey1)
				)
			)
			(* Decent Verifier Verifying App E *)
			|
			(!
				(
					new enclaveVrfyE1KeySeed : keyseed;
					new enclaveVrfyE1EcKey1 : ecskey;
					DecentVrfy_Proc_intr(enclaveVrfyE, appSvrCh, vrfyCh, pub_iasRepSPKey,
						localRepKey, enclaveVrfyE1KeySeed, decentSvrName, authListA, enclaveEName, HashEnclave(enclaveE), enclaveVrfyE1EcKey1)
				)
			)
			(* Decent Verifier Verifying App D (Revoked) *)
			|
			(!
				(
					new enclaveVrfyE2KeySeed : keyseed;
					new enclaveVrfyE2EcKey1 : ecskey;
					DecentVrfy_Proc_intr(enclaveVrfyE, appSvrCh, vrfyCh, pub_iasRepSPKey,
						localRepKey, enclaveVrfyE2KeySeed, decentSvrName, authListA, enclaveEName, HashEnclave(enclaveD), enclaveVrfyE2EcKey1)
				)
			)
			(* Decent Verified App E *)
			|
			(!
				(
					new enclaveEKeySeed : keyseed;
					new enclaveEEcKey1 : ecskey;
					new enclaveEEcKey2 : ecskey;
					DecentApp_Vrfy_Auls_Svr_Proc_intr(enclaveE, appSvrCh, vrfyCh, peerCh, recvCh,
						pub_iasRepSPKey, localRepKey, enclaveEKeySeed,
						decentSvrName, enclaveRecvName, enclaveBName, authListA, enclaveEEcKey1, enclaveEEcKey2)
				)
			)
			(* Decent App B *)
			|
			(!
				(
					new enclaveBKeySeed : keyseed;
					new enclaveBEcKey1 : ecskey;
					new enclaveBEcKey2 : ecskey;
					DecentApp_Auls_Vrfy_Clt_Proc_intr(enclaveB, appSvrCh, peerCh, recvCh, msg,
						pub_iasRepSPKey, localRepKey, enclaveBKeySeed, decentSvrName, enclaveRecvName, enclaveEName, enclaveVrfyEName, authListA,
						enclaveBEcKey1, enclaveBEcKey2)
				)
			)
			(* Malicious Part: *)

			(* Malicious Decent Server *)
			|
			(!
				(
					new svrKeySeedMalSvr : keyseed;
					out(attackCh, svrKeySeedMalSvr);
					DecentSvrProc_intr(malDecentSvr, svrKeySeedMalSvr, svrIasCh, appSvrCh, pub_iasRepSPKey, encPrvsKeySeed, localRepKey)
				)
			)
			(* Decent Verified App D (attacker controlled, approved, revoked) *)
			|
			(!
				(
					new enclaveDKeySeed : keyseed;
					new enclaveDEcKey1 : ecskey;
					new enclaveDEcKey2 : ecskey;
					out(attackCh, enclaveDKeySeed);
					out(attackCh, enclaveDEcKey1);
					out(attackCh, enclaveDEcKey2);
					DecentApp_Vrfy_Auls_Svr_Proc_intr(enclaveD, appSvrCh, vrfyCh, peerCh, recvCh,
						pub_iasRepSPKey, localRepKey, enclaveDKeySeed,
						decentSvrName, enclaveRecvName, enclaveBName, authListA, enclaveDEcKey1, enclaveDEcKey2)
				)
			)
		)
	)
