(***************************** library Expansions ******************************)

	(***************************** CV_Common_Declarations ******************************)

expand CV_Common_Declarations(bitstringbot, bottom, emptyStr, keyseed, cleartext, ciphertext).

	(***************************** CV_DSA ******************************)

expand CV_det_signature_types(spkey, sskey, signinput, signature).
expand CV_det_signature_args(keyseed, spkey, sskey, signinput, signature, sskgen, spkgen, sign, checksign, getmess, getkey).

	(***************************** CV_RSA ******************************)

expand CV_public_key_enc_types(pkey, skey, aenc_seed).
expand CV_public_key_enc_args(keyseed, bitstringbot, bottom, pkey, skey, cleartext, ciphertext, aenc_seed, skgen, pkgen, aenc, aenc_r, adec, ainjbot, aZ).

	(***************************** CV_AEAD ******************************)

expand CV_keygen_types(key).
expand CV_keygen_args(keyseed, key, kgen).

expand CV_AEAD_types(add_data, enc_seed, empty_add_data).
expand CV_AEAD_args(key, bitstringbot, bottom, cleartext, ciphertext, add_data, enc_seed, enc, enc_r, dec, sinjbot, sZ).

	(***************************** DecentRA_EnclaveBas ******************************)

expand Decent_Enclave_Basics(spkey, cleartext, enclaveProg, enclaveHash, HashEnclave, SPKey2Bitstr, Bit2Cleartext, EventSubType).

expand Decent_ECDH_Key(key, ecskey, ecpkey, ecpkgen, signinput,
	DiHeValG, DiHeExp, EcDiHeToKey, EcDiHeKeyGen, EcPKeyToSignin).

	(***************************** DecentRA_LocAtt ******************************)

expand Decent_Local_Attestation(
	(** CV_ macros  **) keyseed, sskey, spkey, sign, signinput, signature,
	(** Encl Basics **) enclaveProg, enclaveHash, HashEnclave,
	(** ECHD Key    **) ecpkey,
	(** This. Rep   **) LocAttRep, GetLocAttSignedRep).

	(***************************** DecentRA_IasRep ******************************)

expand Decent_IAS_Report(
	(** CV_ macros  **) keyseed, sskey, spkey, sskgen, spkgen, sign, getmess, checksign, signinput, signature,
	(** Encl Basics **) enclaveProg, enclaveHash, HashEnclave,
	(** This. Vars  **) iasRepKeySeed, encPrvsKeySeed,
	(** This. Quote **) EnclaveQuoteSignin, GetEnclaveSignedQuote_intr, GetEnclaveSignedQuote,
	(** This. Rep   **) IasRep2Signin, GetSignedIasRep_intr, GetSignedIasRep,
	(** This. Proc  **) IasIssueRep, IasProc_intr).

	(***************************** DecentRA_AuthList ******************************)

expand Decent_Auth_List(enclaveHash, AuthListItem, AuthListNewItem, AuthList, AuthListInsert, AuthListEmpty, AuthListIsIn).

	(***************************** DecentRA_DecentSvr ******************************)

expand Decent_Decent_Server(
	(** CV_ macros    **) keyseed, sskey, spkey, sskgen, spkgen, getmess, sign, checksign, signinput, signature, emptyStr, key, cleartext, ciphertext, enc, dec, sinjbot, empty_add_data,
	(** Encl Basics   **) enclaveProg, enclaveHash, HashEnclave, SPKey2Bitstr, Bit2Cleartext,
	(** ECHD Key      **) ecskey, ecpkey, ecpkgen, EcDiHeKeyGen,
	(** LocAtt Rep    **) LocAttRep, GetLocAttSignedRep,
	(** Ias Rep       **) encPrvsKeySeed, GetEnclaveSignedQuote_intr, IasRep2Signin,
	(** Lists         **) AuthList, AuthListNewItem, AuthListIsIn,
	(** This. Vars    **) enclaveDecentSvr, decentSvrName,
	(** This. SvrCert **) DecentSvrSignin, GetDecentSvrCert, VrfyDecentSvrCert_intr,
	(** This. AppCert **) DecentAppSignin, GetDecentAppCert, VrfyDecentAppCertChain_intr,
	(** This. SvrProc **) DecentSvrIssueCert, DecentSvrGotIasRep, DecentSvrProc_intr, DecentSvrProcP2_intr).

	(***************************** DecentRA_DecentApp ******************************)

expand Decent_Decent_App(
	(** CV_ macros    **) keyseed, sskey, spkey, sskgen, spkgen, getmess, sign, checksign, signinput, signature, emptyStr, key, cleartext, ciphertext, enc, dec, sinjbot, empty_add_data,
	(** Encl Basics   **) enclaveProg, enclaveHash, SPKey2Bitstr, Bit2Cleartext, EventSubType,
	(** ECHD Key      **) ecskey, ecpkey, ecpkgen, EcDiHeKeyGen, EcPKeyToSignin,
	(** LocAtt Rep    **) LocAttRep, GetLocAttSignedRep,
	(** Decent Svr    **) DecentAppSignin, VrfyDecentAppCertChain_intr,
	(** Lists         **) AuthList,
	(** This. AppProc **) DecentAppAccPeer, DecentAppGotCert, DecentAppGotMsg, DecentAppSvrProc_intr, DecentAppCltProc_intr, DecentAppSvrProcP2_intr, DecentAppCltProcP2_intr).

(*============================================================================*)
(******************************* For this process *****************************)

(* Settings:*)
set attacker = active.
(*set maxDepth = 100.*)

(* Channels: *)
free c : channel.
free svrIasACh : channel.
free svrIasBCh : channel.
free appSvrACh : channel.
free appSvrBCh : channel.
free appAB_Ch : channel.

(* Enclave Report Keyseeds *)
const repKeySeedA : keyseed [private].
const repKeySeedB : keyseed [private].

(* Secret Message *)
const msg : bitstring [private].
const advMsg : bitstring.

(* Testings: *)
const enclaveA : enclaveProg.
const enclaveAName : bitstring.
const enclaveAKeySeed : keyseed [private].
const enclaveB : enclaveProg.
const enclaveBName : bitstring.
const enclaveBKeySeed : keyseed [private].
const enclaveC : enclaveProg.
const enclaveCName : bitstring.
const enclaveD : enclaveProg.
const enclaveDName : bitstring.

const svrAKeySeed : keyseed [private].
const svrBKeySeed : keyseed [private].

event testEve1.
event testEve2.

(*query event(IasProcEvent(iasAcceptEve)) public_vars pub_iasRepSPKey.*)
query attacker(msg)
	public_vars pub_iasRepSPKey, pub_encPrvsKey, pub_repSPKeyA, pub_repSPKeyB.
query event(DecentAppGotMsg(enclaveA, msg))
	public_vars pub_iasRepSPKey, pub_encPrvsKey, pub_repSPKeyA, pub_repSPKeyB.
query event(DecentAppGotMsg(enclaveA, advMsg))
	public_vars pub_iasRepSPKey, pub_encPrvsKey, pub_repSPKeyA, pub_repSPKeyB.
query event(DecentAppAccPeer(enclaveA, HashEnclave(enclaveB)))
	public_vars pub_iasRepSPKey, pub_encPrvsKey, pub_repSPKeyA, pub_repSPKeyB.
query event(DecentAppAccPeer(enclaveB, HashEnclave(enclaveA)))
	public_vars pub_iasRepSPKey, pub_encPrvsKey, pub_repSPKeyA, pub_repSPKeyB.
query event(DecentAppAccPeer(enclaveA, HashEnclave(enclaveC)))
	public_vars pub_iasRepSPKey, pub_encPrvsKey, pub_repSPKeyA, pub_repSPKeyB.
(*query event(testEve1)
	public_vars pub_iasRepSPKey, pub_encPrvsKey, pub_repSPKeyA, pub_repSPKeyB.
query event(DecentSvrIssueCert(enclaveDecentSvr, HashEnclave(enclaveA)))
	public_vars pub_iasRepSPKey, pub_encPrvsKey, pub_repSPKeyA, pub_repSPKeyB.*)

process
	let pub_iasRepSPKey : spkey = spkgen(iasRepKeySeed) in
	let pub_encPrvsKey : spkey = spkgen(encPrvsKeySeed) in
	let pub_repSPKeyA : spkey = spkgen(repKeySeedA) in
	let pub_repSPKeyB : spkey = spkgen(repKeySeedB) in

	let authList0 = AuthListInsert(AuthListNewItem(HashEnclave(enclaveDecentSvr), decentSvrName), AuthListEmpty) in
	let authList1 = AuthListInsert(AuthListNewItem(HashEnclave(enclaveA), enclaveAName), authList0) in
	let authList2 = AuthListInsert(AuthListNewItem(HashEnclave(enclaveB), enclaveBName), authList1) in
	let authListA = AuthListInsert(AuthListNewItem(HashEnclave(enclaveC), enclaveCName), authList2) in

	let iasRepA = GetSignedIasRep_intr(true, HashEnclave(enclaveDecentSvr), SPKey2Bitstr(spkgen(svrAKeySeed)), sskgen(iasRepKeySeed)) in
	let iasRepB = GetSignedIasRep_intr(true, HashEnclave(enclaveDecentSvr), SPKey2Bitstr(spkgen(svrBKeySeed)), sskgen(iasRepKeySeed)) in
	let svrACert = GetDecentSvrCert(svrAKeySeed, iasRepA) in
	let svrBCert = GetDecentSvrCert(svrBKeySeed, iasRepB) in
	let appACert = GetDecentAppCert(HashEnclave(enclaveA), spkgen(enclaveAKeySeed), authListA, sskgen(svrAKeySeed)) in
	let appBCert = GetDecentAppCert(HashEnclave(enclaveB), spkgen(enclaveBKeySeed), authListA, sskgen(svrBKeySeed))  in

(*
	if VrfyDecentAppCertChain_intr(appACert, svrACert, pub_iasRepSPKey, decentSvrName, enclaveAName, AuthListEmpty) then
	(
		event testEve1
	)
*)

	(* IAS Server A  (IasProc_intr(svrIasACh, iasRepKeySeed, pub_encPrvsKey))
	|*)
	(* IAS Server B  (IasProc_intr(svrIasBCh, iasRepKeySeed, pub_encPrvsKey))
	|*)
	(* Decent Svr A  (DecentSvrProc_intr(enclaveDecentSvr, svrIasACh, appSvrACh, pub_iasRepSPKey, encPrvsKeySeed, repKeySeedA))
	|*)
	(* Decent Svr B  (DecentSvrProc_intr(enclaveDecentSvr, svrIasBCh, appSvrBCh, pub_iasRepSPKey, encPrvsKeySeed, repKeySeedB))
	|*)
	(* Decent App A  (DecentAppSvrProc_intr(enclaveA, appSvrACh, appAB_Ch, false,
		pub_iasRepSPKey, repKeySeedA, enclaveAKeySeed, decentSvrName, enclaveBName, authListA))
	|*)
	(* Decent App B  (DecentAppCltProc_intr(enclaveB, appSvrBCh, appAB_Ch, false, msg,
		pub_iasRepSPKey, repKeySeedB, enclaveBKeySeed, decentSvrName, enclaveAName, authListA))
*)
	(* Decent App A Phase 2 *) (!DecentAppSvrProcP2_intr(enclaveA, appAB_Ch, false,
		pub_iasRepSPKey, enclaveAKeySeed, decentSvrName, enclaveBName, authListA,
		svrACert, appACert))
	|
	(* Decent App B Phase 2 *) (!DecentAppCltProcP2_intr(enclaveB, appAB_Ch, false, msg,
		pub_iasRepSPKey, enclaveBKeySeed, decentSvrName, enclaveAName, authListA,
		svrBCert, appBCert))
