(***************************** library Expansions ******************************)

	(***************************** CV_Common_Declarations ******************************)

expand CV_Common_Declarations(bitstringbot, bottom, emptyStr, keyseed, cleartext, ciphertext).

	(***************************** CV_DSA ******************************)

expand CV_det_signature_types(spkey, sskey, signinput, signature).
expand CV_det_signature_args(keyseed, spkey, sskey, signinput, signature, sskgen, spkgen, sign, checksign).

	(***************************** CV_RSA ******************************)

expand CV_public_key_enc_types(pkey, skey, aenc_seed).
expand CV_public_key_enc_args(keyseed, bitstringbot, bottom, pkey, skey, cleartext, ciphertext, aenc_seed, skgen, pkgen, aenc, aenc_r, adec, ainjbot, aZ).

	(***************************** CV_AEAD ******************************)

expand CV_keygen_types(key).
expand CV_keygen_args(keyseed, key, kgen).

expand CV_AEAD_types(add_data, enc_seed, empty_add_data).
expand CV_AEAD_args(key, bitstringbot, bottom, cleartext, ciphertext, add_data, enc_seed, enc, enc_r, dec, sinjbot, sZ).

	(***************************** DecentRA_EnclaveBas ******************************)

expand Decent_Enclave_Basics(spkey, cleartext, enclaveProg, enclaveHash, HashEnclave, SPKey2Bitstr, Bit2Cleartext, EventSubType).

expand Decent_ECDH_Key(key, ecskey, ecpkey, ecpkgen, signinput,
	DiHeG, DiHeValG, DiHeExp, EcDiHeToPKey, EcDiHeToKey, EcDiHeKeyGen, EcPKeyToSignin).

	(***************************** DecentRA_LocAtt ******************************)

expand Decent_Local_Attestation(
	(** CV_ macros  **) keyseed, sskey, spkey, sskgen, spkgen, sign, checksign, signinput, signature,
	(** Encl Basics **) enclaveProg, enclaveHash, HashEnclave, EventSubType,
	(** ECHD Key    **) ecpkey,
	(** This. Rep   **) LocAttSignedRep, ToLocAttSignedRep, LocAttRep, GetLocAttSignedRep, VrfyLocAttSignedRep).

	(***************************** DecentRA_IasRep ******************************)

expand Decent_IAS_Report(
	(** CV_ macros  **) keyseed, sskey, spkey, sskgen, spkgen, sign, checksign, signinput, signature,
	(** Encl Basics **) enclaveProg, enclaveHash, HashEnclave, EventSubType,
	(** This. Vars  **) iasRepKeySeed, encPrvsKeySeed,
	(** This. Quote **) EnclaveSignedQuote, ToEnclaveSignedQuote, EnclaveQuoteSignin, GetEnclaveSignedQuote_intr, GetEnclaveSignedQuote, VrfyEnclaveSignedQuote_intr,
	(** This. Rep   **) SignedIasRep, ToSignedIasRep, IasRep2Signin, GetSignedIasRep_intr, GetSignedIasRep, VrfySignedIasRep_intr, VrfySignedIasRep,
	(** This. Proc  **) IasProcEvent, IasProc_intr).

	(***************************** DecentRA_AuthList ******************************)

expand Decent_Auth_List(enclaveHash, AuthListItem, AuthListNewItem, AuthList, AuthListInsert, AuthListEmpty, AuthListIsIn).

	(***************************** DecentRA_DecentSvr ******************************)

expand Decent_Decent_Server(
	(** CV_ macros    **) keyseed, sskey, spkey, sskgen, spkgen, sign, checksign, signinput, signature, emptyStr, key, cleartext, ciphertext, enc, dec, sinjbot, empty_add_data,
	(** Encl Basics   **) enclaveProg, enclaveHash, HashEnclave, SPKey2Bitstr,
	(** ECHD Key      **) ecskey, ecpkey, ecpkgen, EcDiHeKeyGen,
	(** LocAtt Rep    **) LocAttSignedRep, ToLocAttSignedRep, GetLocAttSignedRep, VrfyLocAttSignedRep,
	(** Ias Rep       **) encPrvsKeySeed, GetEnclaveSignedQuote_intr, SignedIasRep, ToSignedIasRep, VrfySignedIasRep_intr,
	(** Lists         **) AuthList, AuthListNewItem, AuthListIsIn,
	(** This. Vars    **) enclaveDecentSvr, decentSvrName,
	(** This. SvrCert **) DecentSvrCert, ToDecentSvrCert, DecentSvrSignin, GetDecentSvrCert, VrfyDecentSvrCert_intr,
	(** This. AppCert **) DecentAppCert, ToDecentAppCert, DecentAppSignin, GetDecentAppCert, VrfyDecentAppCertChain_intr,
	(** This. SvrProc **) DecentSvrProc_intr, DecentAppCertSignReq, DecentAppCertToCipher).

		(***************************** DecentRA_DecentApp ******************************)

expand Decent_Decent_App(
	(** CV_ macros    **) keyseed, sskey, spkey, sskgen, spkgen, sign, checksign, signinput, signature, emptyStr, key, cleartext, ciphertext, enc, dec, sinjbot, empty_add_data,
	(** Encl Basics   **) enclaveProg, enclaveHash, SPKey2Bitstr, Bit2Cleartext, EventSubType,
	(** ECHD Key      **) ecskey, ecpkey, ecpkgen, EcDiHeKeyGen, EcPKeyToSignin,
	(** LocAtt Rep    **) LocAttSignedRep, ToLocAttSignedRep, GetLocAttSignedRep, VrfyLocAttSignedRep,
	(** Ias Rep       **) SignedIasRep, ToSignedIasRep, VrfySignedIasRep_intr,
	(** Decent Svr    **) DecentSvrCert, DecentAppCert, ToDecentAppCert, DecentAppCertSignReq, DecentAppCertToCipher, VrfyDecentAppCertChain_intr,
	(** Lists         **) AuthList,
	(** This. SvrProc **) DecentAppEvent, DecentAppSvrProc_intr, DecentAppCltProc_intr).

(*============================================================================*)
(******************************* For this process *****************************)

(* Settings: *)
set attacker = active.

(* Channels: *)
free c : channel.
free svrIasCh : channel.
free appSvrACh : channel.
free appSvrBCh : channel.
free appAB_Ch : channel.

(* Event Sub Types: *)
const iasAcceptEve : EventSubType.
const iasRejectEve : EventSubType.
const RecvCorMsgEve : EventSubType.
const RecvErrMsgEve : EventSubType.

(* Enclave Report Keyseeds *)
const repKeySeedA : keyseed [private].
const repKeySeedB : keyseed [private].

(* Secret Message *)
const msg : bitstring [private].

(* Testings: *)
const enclaveA : enclaveProg.
const enclaveAName : bitstring.
const enclaveAKeySeed : keyseed [private].
const enclaveB : enclaveProg.
const enclaveBName : bitstring.
const enclaveBKeySeed : keyseed [private].
const enclaveC : enclaveProg.
const enclaveCName : bitstring.
const enclaveD : enclaveProg.
const enclaveDName : bitstring.

event testEve1.
event testEve2.

(*query event(IasProcEvent(iasAcceptEve)) public_vars pub_iasRepSPKey.*)
query attacker(msg) public_vars pub_iasRepSPKey, pub_encPrvsKey, pub_repSPKeyA.

process
	let pub_iasRepSPKey : spkey = spkgen(iasRepKeySeed) in
	let pub_encPrvsKey : spkey = spkgen(encPrvsKeySeed) in
	let pub_repSPKeyA : spkey = spkgen(repKeySeedA) in

	let authList0 = AuthListInsert(AuthListNewItem(HashEnclave(enclaveDecentSvr), decentSvrName), AuthListEmpty) in
	let authList1 = AuthListInsert(AuthListNewItem(HashEnclave(enclaveA), enclaveAName), authList0) in
	let authList2 = AuthListInsert(AuthListNewItem(HashEnclave(enclaveB), enclaveBName), authList1) in
	let authListA = AuthListInsert(AuthListNewItem(HashEnclave(enclaveC), enclaveCName), authList2) in

	(* IAS Server   *) (!IasProc_intr(svrIasCh, iasRepKeySeed, pub_encPrvsKey, iasAcceptEve, iasRejectEve))
	|
	(* Decent Svr A *) (!DecentSvrProc_intr(enclaveDecentSvr, svrIasCh, appSvrACh, pub_iasRepSPKey, encPrvsKeySeed, repKeySeedA))
	|
	(* Decent Svr B *) (!DecentSvrProc_intr(enclaveDecentSvr, svrIasCh, appSvrBCh, pub_iasRepSPKey, encPrvsKeySeed, repKeySeedB))
	|
	(* Decent App A *) (!DecentAppSvrProc_intr(enclaveA, appSvrACh, appAB_Ch, false,
		msg, pub_iasRepSPKey, repKeySeedA, enclaveAKeySeed,
		decentSvrName, enclaveBName, authListA, RecvCorMsgEve, RecvErrMsgEve))
	|
	(* Decent App B *) (!DecentAppCltProc_intr(enclaveB, appSvrBCh, appAB_Ch, false,
		msg, pub_iasRepSPKey, repKeySeedB, enclaveBKeySeed,
		decentSvrName, enclaveAName, authListA))
