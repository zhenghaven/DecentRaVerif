(***************************** library Expansions ******************************)

	(***************************** CV_Common_Declarations ******************************)

expand CV_Common_Declarations(bitstringbot, bottom, keyseed, cleartext, ciphertext).

	(***************************** CV_DSA ******************************)

expand CV_det_signature_types(spkey, sskey, signinput, signature).
expand CV_det_signature_args(keyseed, spkey, sskey, signinput, signature, sskgen, spkgen, sign, checksign).

	(***************************** CV_RSA ******************************)

expand CV_public_key_enc_types(pkey, skey, aenc_seed).
expand CV_public_key_enc_args(keyseed, bitstringbot, bottom, pkey, skey, cleartext, ciphertext, aenc_seed, skgen, pkgen, aenc, aenc_r, adec, ainjbot, aZ).

	(***************************** CV_AEAD ******************************)

expand CV_keygen_types(key).
expand CV_keygen_args(keyseed, key, kgen).

expand CV_AEAD_types(add_data, enc_seed).
expand CV_AEAD_args(key, bitstringbot, bottom, cleartext, ciphertext, add_data, enc_seed, enc, enc_r, dec, sinjbot, sZ).

	(***************************** DecentRA_EnclaveBas ******************************)

expand Decent_Enclave_Basics_types(enclaveProg, enclaveHash).
expand Decent_Enclave_Basics_args(enclaveProg, enclaveHash, HashEnclave, SPKey2Bitstr, spkey).

	(***************************** DecentRA_IasRep ******************************)

expand Decent_IAS_Report_args(keyseed, sskgen, spkgen, sign, checksign, signinput, signature,
	enclaveProg, enclaveHash, HashEnclave,
	iasRepKeySeed, SignedIasRep, ToSignedIasRep, IasRep2Signin, GetSignedIasRep, VrfySignedIasRep, SignedIasRepGetEncHash, SignedIasRepGetAppData).

	(***************************** DecentRA_AuthList ******************************)

expand Decent_Auth_List(AuthListItem, AuthListNewItem, AuthList, AuthListInsert, AuthListEmpty, AuthListIsIn, enclaveHash).

	(***************************** DecentRA_DecentSvr ******************************)

expand Decent_Decent_Server_args(keyseed, sskgen, spkgen, sign, checksign, signinput, signature, sskey, spkey,
	enclaveProg, enclaveHash, SignedIasRep, GetSignedIasRep, SPKey2Bitstr, HashEnclave, VrfySignedIasRep, SignedIasRepGetEncHash, SignedIasRepGetAppData,
	enclaveDecentSvr, DecentSvrCert, ToDecentSvrCert, DecentSvrSignin, GetDecentSvrCert, VrfyDecentSvrCert, AuthList,
	DecentAppCert, ToDecentAppCert, DecentAppSignin, GetDecentAppCert, VrfyDecentAppCert).

(*============================================================================*)
(******************************* For this process *****************************)

set attacker = active.

free c : channel.

free enclaveA : enclaveProg.
free enclaveAName : bitstring.
free enclaveB : enclaveProg.
free enclaveBName : bitstring.
free enclaveC : enclaveProg.
free enclaveCName : bitstring.
free enclaveD : enclaveProg.
free enclaveDName : bitstring.

const emptyStr : bitstring.

event testEve1.
event testEve2.

query attacker(enclaveA) public_vars pub_iasRepSPKey, pub_decentSvrHash.
query event(testEve1) public_vars pub_iasRepSPKey, pub_decentSvrHash.
query event(testEve2) public_vars pub_iasRepSPKey, pub_decentSvrHash.

process
	let pub_iasRepSPKey : spkey = spkgen(iasRepKeySeed) in
	let pub_decentSvrHash : enclaveHash = HashEnclave(enclaveDecentSvr) in

	let authList0 = AuthListInsert(AuthListNewItem(HashEnclave(enclaveA), enclaveAName), AuthListEmpty) in
	let authList1 = AuthListInsert(AuthListNewItem(HashEnclave(enclaveB), enclaveBName), authList0) in
	let authListA = AuthListInsert(AuthListNewItem(HashEnclave(enclaveC), enclaveCName), authList1) in

	new appAKeySeed : keyseed;
	let (appCert : DecentAppCert, svrCert : DecentSvrCert) = GetDecentAppCert(enclaveA, spkgen(appAKeySeed), authListA) in

	if VrfyDecentSvrCert(svrCert) then
	(
		event testEve1
	)
	else
	(
		event testEve2
	)
