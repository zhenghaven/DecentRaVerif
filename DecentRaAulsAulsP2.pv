(***************************** library Expansions ******************************)

	(***************************** CV_Common_Declarations ******************************)

expand CV_Common_Declarations(bitstringbot, bottom, emptyStr, keyseed, cleartext, ciphertext).

	(***************************** CV_DSA ******************************)

expand CV_det_signature_types(spkey, sskey, signinput, signature, StrToSignin).
expand CV_det_signature_args(keyseed, spkey, sskey, signinput, signature, sskgen, spkgen, sign, checksign, getmess, getkey).

	(***************************** CV_RSA ******************************)

expand CV_public_key_enc_types(pkey, skey, aenc_seed).
expand CV_public_key_enc_args(keyseed, bitstringbot, bottom, pkey, skey, cleartext, ciphertext, aenc_seed, skgen, pkgen, aenc, aenc_r, adec, ainjbot, aZ).

	(***************************** CV_AEAD ******************************)

expand CV_keygen_types(key).
expand CV_keygen_args(keyseed, key, kgen).

expand CV_AEAD_types(key, add_data, nonce, zero_nonce, dummy_key, IncrNonce).
expand CV_AEAD_args(key, bitstringbot, bottom, bitstring, ciphertext, bitstring, nonce, enc, enc, dec, sinjbot, sZ, dummy_key).

	(***************************** DecentRA_EnclaveBas ******************************)

expand Decent_Enclave_Basics(spkey, enclaveProg, enclaveHash, HashEnclave, SPKey2Bitstr, EventSubType).

expand Decent_ECDH_Key(key, ecskey, ecpkey, ecpkgen, signinput, bitstring, ciphertext, bitstring, nonce, enc,
	DiHeValG, DiHeExp, EcDiHeToKey, EcDiHeKeyGen, EcPKeyToSignin,
	dummy_ecpkey, GetEcPKeyA, GetEcPKeyB).

	(***************************** DecentRA_LocAtt ******************************)

expand Decent_Local_Attestation(
	(** CV_ macros  **) keyseed, sskey, spkey, sign, signinput, signature,
	(** Encl Basics **) enclaveProg, enclaveHash, HashEnclave,
	(** ECHD Key    **) ecpkey,
	(** This. Rep   **) LocAttRep, GetLocAttSignedRep).

	(***************************** DecentRA_IasRep ******************************)

expand Decent_IAS_Report(
	(** CV_ macros  **) keyseed, sskey, spkey, sskgen, spkgen, sign, getmess, checksign, signinput, signature,
	(** Encl Basics **) enclaveProg, enclaveHash, HashEnclave,
	(** This. Vars  **) iasRepKeySeed, encPrvsKeySeed,
	(** This. Quote **) EnclaveQuoteSignin, GetEnclaveSignedQuote_intr, GetEnclaveSignedQuote,
	(** This. Rep   **) IasRep2Signin, GetSignedIasRep_intr, GetSignedIasRep,
	(** This. Proc  **) IasIssueRep, IasProc_intr).

	(***************************** DecentRA Lists ******************************)

expand Decent_Auth_List(enclaveHash, AuthListItem, AuthListNewItem, AuthList, AuthListInsert, AuthListEmpty, AuthListIsIn, AuthListToStr).
expand Decent_Recv_List(enclaveHash, RecvListItem, RecvListNewItem, RecvList, RecvListInsert, RecvListEmpty, RecvListIsIn, RecvListToStr).

	(***************************** DecentRA_DecentSvr ******************************)

expand Decent_Decent_Server(
	(** CV_ macros    **) keyseed, sskey, spkey, sskgen, spkgen, getmess, sign, checksign, signinput, signature, emptyStr, key, bitstring, ciphertext, nonce, enc, dec, sinjbot, bottom, zero_nonce, IncrNonce,
	(** Encl Basics   **) enclaveProg, enclaveHash, HashEnclave, SPKey2Bitstr,
	(** ECHD Key      **) ecskey, ecpkey, ecpkgen, EcDiHeKeyGen,
	(** LocAtt Rep    **) LocAttRep, GetLocAttSignedRep,
	(** Ias Rep       **) encPrvsKeySeed, GetEnclaveSignedQuote_intr, IasRep2Signin,
	(** Lists         **) AuthList, AuthListNewItem, AuthListIsIn,
	(** This. Vars    **) enclaveDecentSvr, decentSvrName,
	(** This. SvrCert **) DecentSvrSignin, GetDecentSvrCert, VrfyDecentSvrCert_intr,
	(** This. AppCert **) DecentAppSignin, GetDecentAppCert, VrfyDecentAppCertChain_intr,
	(** This. SvrProc **) DecentSvrIssueCert, DecentSvrGotIasRep, DecentSvrProc_intr, DecentSvrProcP2_intr).

	(***************************** DecentRA_DecentApp ******************************)

expand Decent_Decent_App(
	(** CV_ macros    **) keyseed, sskey, spkey, sskgen, spkgen, getmess, sign, checksign, signinput, signature, StrToSignin, emptyStr, key, cleartext, ciphertext, nonce, enc, dec, sinjbot, bottom, zero_nonce, IncrNonce,
	(** Encl Basics   **) enclaveProg, enclaveHash, SPKey2Bitstr, EventSubType,
	(** ECHD Key      **) ecskey, ecpkey, ecpkgen, EcDiHeKeyGen, EcPKeyToSignin,
	(** LocAtt Rep    **) LocAttRep, GetLocAttSignedRep,
	(** Decent Svr    **) DecentSvrSignin, DecentAppSignin, VrfyDecentSvrCert_intr, VrfyDecentAppCertChain_intr,
	(** Lists         **) AuthList,
	(** This.Event    **) DecentAppInit, DecentAppGotCert, DecentAppGotRels, DecentAppAccPeer, DecentAppGotMsg, DecentVrfyIssueCert,
	(** This.VrfyProc **) DecentVrfy_Proc_intr, DecentVrfy_ProcP2_intr,
	(** This.RecvProc **) DecentRevc_Proc_intr, DecentRevc_ProcP2_intr,
	(** This.AppProc1 **) DecentApp_X_X_Svr_ProcP4_intr, DecentApp_X_Auls_Svr_ProcP3_intr, DecentApp_Auls_Auls_Svr_ProcP2_intr, DecentApp_Auls_Auls_Svr_Proc_intr,
	(** This.AppProc2 **) DecentApp_X_Vrfy_Svr_ProcP3_intr, DecentApp_Auls_Vrfy_Svr_ProcP2_intr, DecentApp_Auls_Vrfy_Svr_Proc_intr,
	(** This.AppProc3 **) DecentApp_Vrfy_Auls_Svr_ProcP3_intr, DecentApp_Vrfy_Auls_Svr_ProcP2_intr, DecentApp_Vrfy_Auls_Svr_Proc_intr,
	(** This.AppProc4 **) DecentApp_Vrfy_Vrfy_Svr_ProcP3_intr, DecentApp_Vrfy_Vrfy_Svr_ProcP2_intr, DecentApp_Vrfy_Vrfy_Svr_Proc_intr,
	(** This.AppProc5 **) DecentApp_X_X_Clt_ProcP4_intr, DecentApp_X_Auls_Clt_ProcP3_intr, DecentApp_Auls_Auls_Clt_ProcP2_intr, DecentApp_Auls_Auls_Clt_Proc_intr,
	(** This.AppProc6 **) DecentApp_X_Vrfy_Clt_ProcP3_intr_intr, DecentApp_Auls_Vrfy_Clt_ProcP2_intr, DecentApp_Auls_Vrfy_Clt_Proc_intr,
	(** This.AppProc7 **) DecentApp_Vrfy_Auls_Clt_ProcP3_intr, DecentApp_Vrfy_Auls_Clt_ProcP2_intr, DecentApp_Vrfy_Auls_Clt_Proc_intr,
	(** This.AppProc8 **) DecentApp_Vrfy_Vrfy_Clt_ProcP3_intr, DecentApp_Vrfy_Vrfy_Clt_ProcP2_intr, DecentApp_Vrfy_Vrfy_Clt_Proc_intr
	).

(*============================================================================*)
(******************************* For this process *****************************)

(* Settings:*)
set attacker = active.

(* Channels: *)
free svrIasCh : channel.
free recvCh : channel.
free appSvrCh : channel.
free peerCh : channel.
free attackCh : channel.

(* Secret Message *)
const msg : bitstring [private].

(* Enclaves *)
const enclaveRecv : enclaveProg.
const enclaveRecvName : bitstring.

const enclaveA : enclaveProg.
const enclaveAName : bitstring.

const enclaveB : enclaveProg.
const enclaveBName : bitstring.

const enclaveC : enclaveProg.
const enclaveD : enclaveProg.
const malDecentSvr : enclaveProg.


(******************************* Secrecy assumptions *****************************)

not attacker(iasRepKeySeed).
not attacker(encPrvsKeySeed).

not attacker(new localRepKey).
not attacker(new decentSvrKeySeed).
not attacker(new enclaveRecvKeySeed).
not attacker(new enclaveAKeySeed).
not attacker(new enclaveBKeySeed).

not attacker(sskgen(iasRepKeySeed)).
not attacker(sskgen(encPrvsKeySeed)).

not attacker(sskgen(new localRepKey)).
not attacker(sskgen(new decentSvrKeySeed)).
not attacker(sskgen(new enclaveRecvKeySeed)).
not attacker(sskgen(new enclaveAKeySeed)).
not attacker(sskgen(new enclaveBKeySeed)).

not attacker(new enclaveAEcKey2).
not attacker(new enclaveBEcKey2).

(******************************* Queries *****************************)

query attacker(msg).

query anyAppGotMsg : enclaveProg, anyAppGotMsgAuLs : AuthList, revcLoadedAuLs : AuthList, anyReLs : bitstring, anyMsg : bitstring;
	let auLs =
	AuthListInsert(AuthListNewItem(HashEnclave(enclaveD), enclaveAName),
	AuthListInsert(AuthListNewItem(HashEnclave(enclaveB), enclaveBName),
	AuthListInsert(AuthListNewItem(HashEnclave(enclaveA), enclaveAName),
	AuthListInsert(AuthListNewItem(HashEnclave(enclaveRecv), enclaveRecvName),
	AuthListInsert(AuthListNewItem(HashEnclave(enclaveDecentSvr), decentSvrName), AuthListEmpty))))) in
	event(DecentAppGotMsg(anyAppGotMsg, anyMsg)) ==>
		(event(DecentAppAccPeer(enclaveB, HashEnclave(anyAppGotMsg), anyAppGotMsgAuLs)) ==>
			(event(DecentAppGotRels(enclaveB, HashEnclave(enclaveRecv), revcLoadedAuLs, anyReLs)) ==>
				((anyAppGotMsgAuLs = revcLoadedAuLs) && (revcLoadedAuLs = auLs))
			)
		).

process
	let authList0 = AuthListInsert(AuthListNewItem(HashEnclave(enclaveDecentSvr), decentSvrName), AuthListEmpty) in
	let authList1 = AuthListInsert(AuthListNewItem(HashEnclave(enclaveRecv), enclaveRecvName), authList0) in
	let authList2 = AuthListInsert(AuthListNewItem(HashEnclave(enclaveA), enclaveAName), authList1) in
	let authList3 = AuthListInsert(AuthListNewItem(HashEnclave(enclaveB), enclaveBName), authList2) in
	let authListA = AuthListInsert(AuthListNewItem(HashEnclave(enclaveD), enclaveAName), authList3) in

	let revcListA = (HashEnclave(enclaveD), HashEnclave(enclaveD)) in

	let pub_iasRepSPKey : spkey = spkgen(iasRepKeySeed) in
	let pub_encPrvsKey : spkey = spkgen(encPrvsKeySeed) in

	(* IAS Server   *)
	(!IasProc_intr(svrIasCh, iasRepKeySeed, pub_encPrvsKey))
	(* Enclave Platform *)
	|
	(!
		(
			new localRepKey : keyseed;
			new decentSvrKeySeed : keyseed;

			let iasRep =
				GetSignedIasRep_intr(true, HashEnclave(enclaveDecentSvr), SPKey2Bitstr(spkgen(decentSvrKeySeed)), sskgen(iasRepKeySeed)) in

			let svrCert = GetDecentSvrCert(decentSvrKeySeed, iasRep) in

			(* Recvoker *)
			(!
				(
					in(attackCh, someAuls1 : AuthList);
					new enclaveRecvKeySeed : keyseed;
					let recvCert = GetDecentAppCert(HashEnclave(enclaveRecv), spkgen(enclaveRecvKeySeed), someAuls1, sskgen(decentSvrKeySeed)) in
					DecentRevc_ProcP2_intr(recvCh, enclaveRecvKeySeed, revcListA, svrCert, recvCert)
				)
			)
			(* Decent App A *)
			|
			(
				(
					in(attackCh, someAuls2 : AuthList);
					new enclaveAKeySeed : keyseed;
					new enclaveAEcKey2 : ecskey;
					let appACert = GetDecentAppCert(HashEnclave(enclaveA), spkgen(enclaveAKeySeed), someAuls2, sskgen(decentSvrKeySeed)) in
					DecentApp_Auls_Auls_Svr_ProcP2_intr(enclaveA, peerCh, recvCh,
						pub_iasRepSPKey, enclaveAKeySeed, decentSvrName, enclaveRecvName, enclaveBName, someAuls2,
						svrCert, appACert, enclaveAEcKey2)
				)
			)
			(* Decent App B *)
			|
			(
				(
					(*in(attackCh, someAuls : AuthList);*)
					new enclaveBKeySeed : keyseed;
					new enclaveBEcKey2 : ecskey;
					let appBCert = GetDecentAppCert(HashEnclave(enclaveB), spkgen(enclaveBKeySeed), authListA, sskgen(decentSvrKeySeed)) in
					DecentApp_Auls_Auls_Clt_ProcP2_intr(enclaveB, peerCh, recvCh, msg,
						pub_iasRepSPKey, enclaveBKeySeed, decentSvrName, enclaveRecvName, enclaveAName, authListA,
						svrCert, appBCert, enclaveBEcKey2)
				)
			)
			(* Malicious Part: *)

			(* Decent Platform for App C (attacker controlled) *)
			|
			(!
				(
					in(attackCh, someAuls3 : AuthList);
					new enclaveCKeySeed : keyseed;
					new enclaveCEcKey2 : ecskey;
					out(attackCh, enclaveCKeySeed);
					out(attackCh, enclaveCEcKey2);
					let appCCert = GetDecentAppCert(HashEnclave(enclaveC), spkgen(enclaveCKeySeed), someAuls3, sskgen(decentSvrKeySeed)) in
					DecentApp_Auls_Auls_Svr_ProcP2_intr(enclaveC, peerCh, recvCh,
						pub_iasRepSPKey, enclaveCKeySeed, decentSvrName, enclaveRecvName, enclaveBName, someAuls3,
						svrCert, appCCert, enclaveCEcKey2)
				)
			)
			(* Decent Platform for App D (attacker controlled, in AuthList, revoked) *)
			|
			(!
				(
					in(attackCh, someAuls4 : AuthList);
					new enclaveDKeySeed : keyseed;
					new enclaveDEcKey2 : ecskey;
					out(attackCh, enclaveDKeySeed);
					out(attackCh, enclaveDEcKey2);
					let appDCert = GetDecentAppCert(HashEnclave(enclaveD), spkgen(enclaveDKeySeed), someAuls4, sskgen(decentSvrKeySeed)) in
					DecentApp_Auls_Auls_Svr_ProcP2_intr(enclaveD, peerCh, recvCh,
						pub_iasRepSPKey, enclaveDKeySeed, decentSvrName, enclaveRecvName, enclaveBName, someAuls4,
						svrCert, appDCert, enclaveDEcKey2)
				)
			)
		)
	)
